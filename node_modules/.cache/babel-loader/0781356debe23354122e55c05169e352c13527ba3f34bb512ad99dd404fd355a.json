{"ast":null,"code":"import axios from \"axios\";\nimport useValidate from \"@vuelidate/core\";\nimport { required, email, minLength } from \"@vuelidate/validators\";\n\n// ************************************************\n\nexport default {\n  name: \"RegisterUsers\",\n  // ************************************************\n\n  data() {\n    return {\n      errorMsg: \"\",\n      successMsg: \"\",\n      isDBConnected: \"\",\n      isDBConnectedMsg: \"\",\n      studentsData: [],\n      v$: useValidate(),\n      newStudent: {\n        name: \"\",\n        email: \"\",\n        phone: \"\"\n      },\n      currentStudent: {},\n      showDeleteAllModal: true,\n      showDeleteModal: true,\n      showUpdateModal: true,\n      showUpdateModal: true\n    };\n  },\n  // ************************************************\n\n  validations() {\n    return {\n      newStudent: {\n        name: {\n          required,\n          minLength: minLength(5)\n        },\n        email: {\n          required,\n          email\n        },\n        phone: {\n          required,\n          minLength: minLength(9)\n        }\n      },\n      currentStudent: {\n        name: {\n          required,\n          minLength: minLength(5)\n        },\n        email: {\n          required,\n          email\n        },\n        phone: {\n          required,\n          minLength: minLength(9)\n        }\n      }\n    };\n  },\n  // ************************************************\n\n  mounted() {\n    this.dbConnection();\n    this.getStudentData();\n  },\n  // ************************************************\n\n  methods: {\n    async getStudentData() {\n      let res = await axios.get(`http://localhost/student_dashboard/src/api/students.php?action=read`);\n      const resData = res.data;\n      if (res.status == 200) {\n        if (resData.error) {\n          // if error\n          this.errorMsg = resData.message;\n        } else {\n          // if everything is ok\n          this.studentsData = resData.students;\n        }\n      }\n    },\n    async dbConnection() {\n      let res = await axios.get(`http://localhost/student_dashboard/src/api/students.php`);\n      const resData = res.data;\n      this.isDBConnected = resData.is_db_connected;\n      this.isDBConnectedMsg = resData.connection_msg;\n    },\n    async addNewStudent() {\n      // console.log(\"Hello\");\n      this.clearOldMsgs();\n      this.v$.newStudent.$validate();\n      if (!this.v$.newStudent.$error) {\n        console.log(\"Add New Student : Validated Successfully\");\n        let formData = this.toFormData(this.newStudent);\n        let res = await axios.post(`http://localhost/student_dashboard/src/api/students.php?action=create`, formData);\n        const resData = res.data;\n        if (res.status == 200) {\n          if (resData.error) {\n            // if error\n            this.errorMsg = resData.message;\n          } else {\n            // if everything is ok\n            this.successMsg = resData.message;\n            this.newStudent = {\n              name: \"\",\n              email: \"\",\n              phone: \"\"\n            };\n            this.getStudentData();\n            this.v$.newStudent.$reset();\n          }\n        }\n      } else {\n        console.log(\"Add New Student : Not Validated\");\n      }\n    },\n    updateModalDialog(val) {\n      this.showUpdateModal = val;\n    },\n    async updateStudent() {\n      this.v$.currentStudent.$validate();\n      if (!this.v$.currentStudent.$error) {\n        this.updateModalDialog(false);\n        this.clearOldMsgs();\n        let formData = this.toFormData(this.currentStudent);\n        let res = await axios.post(`http://localhost/student_dashboard/src/api/students.php?action=update`, formData);\n        const resData = res.data;\n        if (res.status == 200) {\n          if (resData.error) {\n            // if error\n            this.errorMsg = resData.message;\n          } else {\n            // if everything is ok\n            this.successMsg = resData.message;\n            this.currentStudent = {};\n            this.getStudentData();\n            this.v$.currentStudent.$reset();\n          }\n        }\n      }\n    },\n    selectStudent(std) {\n      this.currentStudent = std;\n    },\n    deleteAllModalDialog(val) {\n      this.showDeleteAllModal = val;\n    },\n    clearOldMsgs() {\n      this.successMsg = \"\";\n      this.errorMsg = \"\";\n    },\n    async deleteAllStudents() {\n      this.deleteAllModalDialog(false);\n      this.clearOldMsgs();\n      let res = await axios.get(`http://localhost/student_dashboard/src/api/students.php?action=deleteAll`);\n      const resData = res.data;\n      if (res.status == 200) {\n        if (resData.error) {\n          // if error\n          this.errorMsg = resData.message;\n        } else {\n          // if everything is ok\n          this.successMsg = resData.message;\n          this.studentsData = \"\";\n        }\n      }\n    },\n    deleteModalDialog(val) {\n      this.showDeleteModal = val;\n    },\n    toFormData(obj) {\n      var fd = new FormData();\n      for (var i in obj) {\n        console.log(i + \"=>\" + obj[i]);\n        fd.append(i, obj[i]);\n      }\n      return fd;\n    },\n    async deleteStudent() {\n      let formData = this.toFormData(this.currentStudent);\n      this.deleteModalDialog(false);\n      this.clearOldMsgs();\n      let res = await axios.post(`http://localhost/student_dashboard/src/api/students.php?action=delete`, formData);\n      const resData = res.data;\n      if (res.status == 200) {\n        if (resData.error) {\n          // if error\n          this.errorMsg = resData.message;\n        } else {\n          // if everything is ok\n          let newStudentsData = this.studentsData.filter(ele => ele.id != this.currentStudent.id);\n          console.table(newStudentsData);\n          this.successMsg = resData.message;\n          this.currentStudent = {};\n          // this.getStudentData();\n          this.studentsData = newStudentsData;\n        }\n      }\n    }\n  }\n};\n\n// ************************************************","map":{"version":3,"mappings":"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","names":["axios","useValidate","required","email","minLength","name","data","errorMsg","successMsg","isDBConnected","isDBConnectedMsg","studentsData","v$","newStudent","phone","currentStudent","showDeleteAllModal","showDeleteModal","showUpdateModal","validations","mounted","dbConnection","getStudentData","methods","res","get","resData","status","error","message","students","is_db_connected","connection_msg","addNewStudent","clearOldMsgs","$validate","$error","console","log","formData","toFormData","post","$reset","updateModalDialog","val","updateStudent","selectStudent","std","deleteAllModalDialog","deleteAllStudents","deleteModalDialog","obj","fd","FormData","i","append","deleteStudent","newStudentsData","filter","ele","id","table"],"sourceRoot":"","sources":["/opt/lampp/htdocs/student_dashboard/src/components/RegisterUsers.vue"],"sourcesContent":["<template>\n\n    <!-- ************************************************  -->\n\n    <div>\n        <h1 class=\"text-center\"> CRUD PHP , Vuejs.3 & MySQL </h1>\n    </div>\n\n    <!-- ************************************************  -->\n\n    <!-- Alert For Database Connection -->\n    <div class=\"container\" v-if=\"!isDBConnected\">\n        <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n            {{ isDBConnectedMsg }}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"close\"></button>\n        </div>\n    </div>\n\n    <!-- ************************************************  -->\n\n    <div class=\"container\" v-else>\n\n        <!-- ************************************************  -->\n\n        <!-- Show Add Student Button -->\n        <div class=\"col-lg-12\">\n            <button class=\"btn btn-danger float-start\" v-if=\"studentsData.length > 0\" data-bs-toggle=\"modal\"\n                data-bs-target=\"#deleteAllModal\">\n                <font-awesome-icon :icon=\"['fas', 'user-times']\" />\n                Delete All Students\n            </button>\n            <button type=\"button\" class=\"btn btn-info float-end\" data-bs-toggle=\"modal\" data-bs-target=\"#overlay\">\n                <font-awesome-icon :icon=\"['fas', 'user']\" />\n                Add New Student\n            </button>\n            <div class=\"clearfix\"></div>\n        </div>\n\n        <!-- ************************************************  -->\n\n        <hr class=\"bg-info\">\n\n        <!-- ************************************************  -->\n\n        <!-- Show Error Message -->\n\n        <div class=\"alert alert-danger alert-dismissible fade show\" role=\"alert\" v-if=\"errorMsg\">\n            {{ errorMsg }}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"close\"></button>\n        </div>\n\n        <!-- ************************************************  -->\n\n        <!-- Show Success Message -->\n\n        <div class=\"alert alert-success alert-dismissible fade show\" role=\"alert\" v-if=\"successMsg\">\n            {{ successMsg }}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"close\"></button>\n        </div>\n\n        <!-- ************************************************  -->\n\n        <!-- Show Student Details : Tables -->\n\n        <table class=\"table table-border table-striped caption-top text-center\">\n\n            <caption>List of Registered Students ({{ studentsData.length }})</caption>\n\n            <thead>\n                <tr class=\"bg-success text-light\">\n                    <th>\n                        <font-awesome-icon :icon=\"['fas', 'id-badge']\" />\n                        ID\n                    </th>\n                    <th>\n                        <font-awesome-icon :icon=\"['fas', 'user']\" />\n                        Name\n                    </th>\n                    <th>\n                        <font-awesome-icon :icon=\"['fas', 'envelope']\" />\n                        Email\n                    </th>\n                    <th>\n                        <font-awesome-icon :icon=\"['fas', 'phone']\" />\n                        Phone\n                    </th>\n                    <th>\n                        <font-awesome-icon :icon=\"['fas', 'gear']\" />\n                        Actions\n                    </th>\n                </tr>\n            </thead>\n\n            <tbody>\n                <tr v-for=\"(student, i) in studentsData\" :key=\"i\">\n                    <td>{{ student.id }}</td>\n                    <td>{{ student.name }}</td>\n                    <td>{{ student.email }}</td>\n                    <td>{{ student.phone }}</td>\n                    <td>\n                        <button type=\"button\" class=\"btn btn-danger\" data-bs-toggle=\"modal\" data-bs-target=\"#deleteModal\"\n                            @click=\"selectStudent(student)\">\n                            <font-awesome-icon :icon=\"['fas', 'user-xmark']\" />\n                            Delete\n                        </button>\n                        &nbsp;\n                        <button type=\"button\" class=\"btn btn-warning\" data-bs-toggle=\"modal\" data-bs-target=\"#updateModal\"\n                            @click=\"selectStudent(student)\">\n                            <font-awesome-icon :icon=\"['fas', 'user-pen']\" />\n                            Update\n                        </button>\n                    </td>\n                </tr>\n            </tbody>\n\n        </table>\n\n        <!-- ************************************************  -->\n\n        <!-- Show Add New Student Modal -->\n\n        <div id=\"overlay\" class=\"modal fade\" tabindex=\"-1\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title text-info\" id=\"exampleModalLabel\">Add New Student</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body p-4\">\n                        <form action=\"#\" method=\"post\" @click.prevent>\n                            <div class=\"form-floating mb-3\" :class=\"{ 'form-group-error': v$.newStudent.name.$error }\">\n                                <input type=\"text\" class=\"form-control\" id=\"StudentNameFloat\" placeholder=\"John Doe\"\n                                    v-model.trim=\"newStudent.name\">\n                                <label for=\"StudentNameFloat\">\n                                    <font-awesome-icon :icon=\"['far', 'user']\" />\n                                    Student Name\n                                </label>\n                                <span class=\"error-feedback\" v-if=\"v$.newStudent.name.$error\">\n                                    {{ v$.newStudent.name.$errors[0].$message }}\n                                </span>\n                            </div>\n                            <div class=\"form-floating mb-3\" :class=\"{ 'form-group-error': v$.newStudent.email.$error }\">\n                                <input type=\"email\" class=\"form-control\" id=\"StudentEmailFloat\"\n                                    placeholder=\"John_Doe@gmail.com\" v-model.trim=\"newStudent.email\">\n                                <label for=\"StudentEmailFloat\">\n                                    <font-awesome-icon :icon=\"['far', 'envelope']\" />\n                                    Student Email\n                                </label>\n                                <span class=\"error-feedback\" v-if=\"v$.newStudent.email.$error\">\n                                    {{ v$.newStudent.email.$errors[0].$message }}\n                                </span>\n                            </div>\n                            <div class=\"form-floating mb-3\" :class=\"{ 'form-group-error': v$.newStudent.phone.$error }\">\n                                <input type=\"tel\" class=\"form-control\" id=\"StudentPhoneFloat\" placeholder=\"0123456789\"\n                                    v-model.trim=\"newStudent.phone\">\n                                <label for=\"StudentPhoneFloat\">\n                                    <font-awesome-icon :icon=\"['fas', 'phone']\" />\n                                    Student Phone No.\n                                </label>\n                                <span class=\"error-feedback\" v-if=\"v$.newStudent.phone.$error\">\n                                    {{ v$.newStudent.phone.$errors[0].$message }}\n                                </span>\n                            </div>\n                            <hr class=\"bg-info\">\n                            <div class=\"d-grid gap-2\">\n                                <button type=\"submit\" class=\"btn btn-info\" @click=\"addNewStudent()\">Add New Student</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- ************************************************  -->\n\n        <!-- Show Edit Student Modal -->\n\n        <div id=\"updateModal\" class=\"modal fade\" tabindex=\"-1\" aria-labelledby=\"updateModalLabel\" aria-hidden=\"true\" v-if=\"showUpdateModal\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title text-warning\" id=\"updateModalLabel\">Update Current Student</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body p-4\">\n                        <form action=\"#\" method=\"post\" @click.prevent>\n                            <div class=\"form-floating mb-3\" :class=\"{ 'form-group-error': v$.currentStudent.name.$error }\">\n                                <input type=\"text\" class=\"form-control\" id=\"StudentNameFloat\" placeholder=\"John Doe\"\n                                    v-model.trim=\"currentStudent.name\">\n                                <label for=\"StudentNameFloat\">\n                                    <font-awesome-icon :icon=\"['far', 'user']\" />\n                                    Student Name\n                                </label>\n                                <span class=\"error-feedback\" v-if=\"v$.currentStudent.name.$error\">\n                                    {{ v$.currentStudent.name.$errors[0].$message }}\n                                </span>\n                            </div>\n                            <div class=\"form-floating mb-3\" :class=\"{ 'form-group-error': v$.currentStudent.email.$error }\">\n                                <input type=\"email\" class=\"form-control\" id=\"StudentEmailFloat\"\n                                    placeholder=\"John_Doe@gmail.com\" v-model.trim=\"currentStudent.email\">\n                                <label for=\"StudentEmailFloat\">\n                                    <font-awesome-icon :icon=\"['far', 'envelope']\" />\n                                    Student Email\n                                </label>\n                                <span class=\"error-feedback\" v-if=\"v$.currentStudent.email.$error\">\n                                    {{ v$.currentStudent.email.$errors[0].$message }}\n                                </span>\n                            </div>\n                            <div class=\"form-floating mb-3\" :class=\"{ 'form-group-error': v$.currentStudent.phone.$error }\">\n                                <input type=\"tel\" class=\"form-control\" id=\"StudentPhoneFloat\" placeholder=\"0123456789\"\n                                    v-model.trim=\"currentStudent.phone\">\n                                <label for=\"StudentPhoneFloat\">\n                                    <font-awesome-icon :icon=\"['fas', 'phone']\" />\n                                    Student Phone No.\n                                </label>\n                                <span class=\"error-feedback\" v-if=\"v$.currentStudent.phone.$error\">\n                                    {{ v$.currentStudent.phone.$errors[0].$message }}\n                                </span>\n                            </div>\n                            <hr class=\"bg-info\">\n                            <div class=\"d-grid gap-2\">\n                                <button type=\"submit\" class=\"btn btn-warning\" @click=\"updateStudent()\">Update Current\n                                    Student</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- ************************************************  -->\n\n        <!-- Show Delete Student Modal -->\n\n        <div id=\"deleteModal\" class=\"modal fade\" tabindex=\"-1\" aria-labelledby=\"deleteModalLabel\" aria-hidden=\"true\" v-if=\"showDeleteModal\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title text-danger\" id=\"deleteModalLabel\">Delete Current Student</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body p-4\">\n                        <form action=\"#\" method=\"post\" @click.prevent>\n                            <h6 class=\"text-danger\">Are you sure you want to delete this student?</h6>\n                            <p>\n                                <span> <font-awesome-icon :icon=\"['fas', 'user']\" /> {{ currentStudent.name }} </span>\n                                <br>\n                                <span> <font-awesome-icon :icon=\"['fas', 'envelope']\" /> {{ currentStudent.email }}</span>\n                                <br>\n                                <span> <font-awesome-icon :icon=\"['fas', 'phone']\" /> {{ currentStudent.phone }} </span>\n                            </p>\n                            <hr class=\"bg-danger\">\n                            <div class=\"d-grid gap-2\">\n                                <button type=\"submit\" class=\"btn btn-danger\" @click=\"deleteStudent()\">\n                                    Delete Current Student\n                                </button>\n                                <button class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                                    No, Don't Delete\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- ************************************************  -->\n\n        <!-- Show Delete All Students Modal -->\n\n        <div id=\"deleteAllModal\" class=\"modal fade\" tabindex=\"-1\" aria-labelledby=\"deleteAllModalLabel\" aria-hidden=\"true\" v-if=\"showDeleteAllModal\">\n            <div class=\"modal-dialog\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title text-danger\" id=\"deleteAllModalLabel\">Delete All Students</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n                    </div>\n                    <div class=\"modal-body p-4\">\n                        <form action=\"#\" method=\"post\" @click.prevent>\n                            <h6 class=\"text-danger\">Are you sure you want to delete All students?</h6>\n                            <p class=\"text-danger\"> Deleting all students, will remove them from your database </p>\n                            <hr class=\"bg-danger\">\n                            <div class=\"d-grid gap-2\">\n                                <button type=\"submit\" class=\"btn btn-danger\" @click=\"deleteAllStudents()\">\n                                    Delete Current Student\n                                </button>\n                                <button class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">\n                                    No, Don't Delete\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <!-- ************************************************  -->\n\n</div>\n</template>\n\n<!-- ************************************************  -->\n\n<script>\n\nimport axios from \"axios\";\n\nimport useValidate from \"@vuelidate/core\";\nimport { required, email, minLength } from \"@vuelidate/validators\";\n\n// ************************************************\n\nexport default {\n\n    name: \"RegisterUsers\",\n\n    // ************************************************\n\n    data() {\n        return {\n            errorMsg: \"\",\n            successMsg: \"\",\n            isDBConnected: \"\",\n            isDBConnectedMsg: \"\",\n            studentsData: [],\n            v$: useValidate(),\n            newStudent: {\n                name: \"\",\n                email: \"\",\n                phone: \"\",\n            },\n            currentStudent: {},\n            showDeleteAllModal: true,\n            showDeleteModal: true,\n            showUpdateModal: true,\n            showUpdateModal: true,\n        }\n    },\n\n    // ************************************************\n\n    validations() {\n        return {\n            newStudent: {\n                name: { required, minLength: minLength(5) },\n                email: { required, email },\n                phone: { required, minLength: minLength(9) },\n            },\n            currentStudent: {\n                name: { required, minLength: minLength(5) },\n                email: { required, email },\n                phone: { required, minLength: minLength(9) },\n            },\n        }\n    },\n\n    // ************************************************\n\n    mounted() {\n        this.dbConnection();\n        this.getStudentData();\n    },\n\n    // ************************************************\n\n    methods: {\n\n        async getStudentData() {\n            let res = await axios.get(`http://localhost/student_dashboard/src/api/students.php?action=read`);\n            const resData = res.data;\n            if (res.status == 200) {\n                if (resData.error) {\n                    // if error\n                    this.errorMsg = resData.message;\n                } else {\n                    // if everything is ok\n                    this.studentsData = resData.students;\n                }\n            }\n        },\n\n        async dbConnection() {\n            let res = await axios.get(`http://localhost/student_dashboard/src/api/students.php`);\n            const resData = res.data;\n            this.isDBConnected = resData.is_db_connected;\n            this.isDBConnectedMsg = resData.connection_msg;\n        },\n\n        async addNewStudent() {\n            // console.log(\"Hello\");\n            this.clearOldMsgs();\n            this.v$.newStudent.$validate();\n            if (!this.v$.newStudent.$error) {\n\n                console.log(\"Add New Student : Validated Successfully\");\n\n                let formData = this.toFormData(this.newStudent);\n                let res = await axios.post(`http://localhost/student_dashboard/src/api/students.php?action=create`, formData);\n                const resData = res.data;\n                if (res.status == 200) {\n                    if (resData.error) {\n                        // if error\n                        this.errorMsg = resData.message;\n                    } else {\n                        // if everything is ok\n                        this.successMsg = resData.message;\n                        this.newStudent = {name:\"\", email:\"\", phone:\"\"};\n                        this.getStudentData();\n                        this.v$.newStudent.$reset();\n                    }\n                }\n\n            } else {\n                console.log(\"Add New Student : Not Validated\");\n            }\n        },\n\n        updateModalDialog(val) {\n            this.showUpdateModal = val;\n        },\n\n        async updateStudent() {\n            this.v$.currentStudent.$validate();\n            if (!this.v$.currentStudent.$error) {\n                this.updateModalDialog(false);\n                this.clearOldMsgs();\n                let formData = this.toFormData(this.currentStudent);\n                let res = await axios.post(`http://localhost/student_dashboard/src/api/students.php?action=update`, formData);\n                const resData = res.data;\n                if (res.status == 200) {\n                    if (resData.error) {\n                        // if error\n                        this.errorMsg = resData.message;\n                    } else {\n                        // if everything is ok\n                        this.successMsg = resData.message;\n                        this.currentStudent = {};\n                        this.getStudentData();\n                        this.v$.currentStudent.$reset();\n                    }\n                }\n            }\n        },\n\n        selectStudent(std) {\n            this.currentStudent = std;\n        },\n\n        deleteAllModalDialog(val) {\n            this.showDeleteAllModal = val;\n        },\n\n        clearOldMsgs() {\n            this.successMsg = \"\";\n            this.errorMsg = \"\";\n        },\n\n        async deleteAllStudents() {\n            this.deleteAllModalDialog(false);\n            this.clearOldMsgs();\n            let res = await axios.get(`http://localhost/student_dashboard/src/api/students.php?action=deleteAll`);\n            const resData = res.data;\n            if (res.status == 200) {\n                if (resData.error) {\n                    // if error\n                    this.errorMsg = resData.message;\n                } else {\n                    // if everything is ok\n                    this.successMsg = resData.message;\n                    this.studentsData = \"\";\n                }\n            }\n        },\n\n        deleteModalDialog(val) {\n            this.showDeleteModal = val;\n        },\n\n        toFormData(obj) {\n            var fd = new FormData();\n            for (var i in obj) {\n                console.log(i + \"=>\" + obj[i]);\n                fd.append(i, obj[i]);\n            }\n            return fd;\n        },\n\n        async deleteStudent() {\n            let formData = this.toFormData(this.currentStudent);\n            this.deleteModalDialog(false);\n            this.clearOldMsgs();\n            let res = await axios.post(`http://localhost/student_dashboard/src/api/students.php?action=delete`, formData);\n            const resData = res.data;\n            if (res.status == 200) {\n                if (resData.error) {\n                    // if error\n                    this.errorMsg = resData.message;\n                } else {\n                    // if everything is ok\n                    let newStudentsData = this.studentsData.filter((ele) => ele.id != this.currentStudent.id);\n                    console.table(newStudentsData);\n                    this.successMsg = resData.message;\n                    this.currentStudent = {};\n                    // this.getStudentData();\n                    this.studentsData = newStudentsData;\n                }\n            }\n        },\n\n    },\n\n}\n\n// ************************************************\n\n</script>\n\n<!-- ************************************************ -->\n\n<style scoped lang=\"scss\">\nh1 {\n    background-color: cadetblue;\n    color: white;\n    padding: 8px;\n    margin-top: 0;\n    margin-bottom: 50px;\n}\n\n.form-group-error {\n    color: red;\n}\n\n.form-group-error input {\n    border-color: red;\n}\n</style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}